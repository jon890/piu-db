// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_PRISMA_URL") // uses connection pooling
}

model User {
  seq                        Int                          @id @default(autoincrement())
  name                       String                       @unique
  password                   String
  nickname                   String                       @unique
  uid                        String                       @unique
  createdAt                  DateTime                     @default(now()) @map("created_at")
  updatedAt                  DateTime                     @updatedAt @map("updated_at")
  piuProfiles                PiuProfile[]
  assignment                 Assignment[]
  assignmentRooms            AssignmentRoom[]
  assignmentRoomParticipants AssignmentRoomParticipants[]
  assignmentRecords          AssigmentRecord[]
  records                    Record[]
  fromRival                  Rival[]                      @relation("fromRival")
  toRival                    Rival[]                      @relation("toRival")
  skillAttacks               SkillAttack[]
  actionLogs                 ActionLog[]
  notices                    Notice[]
  replies                    Reply[]

  @@map("td_user")
}

model PiuProfile {
  seq              Int      @id @default(autoincrement())
  gameId           String   @unique @map("game_id")
  lastLoginDate    String?  @map("last_login_date")
  lastPlayedCenter String?  @map("last_played_center")
  user             User     @relation(fields: [userSeq], references: [seq])
  userSeq          Int      @map("user_seq")
  isPrimary        Boolean  @default(false) @map("is_primary")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")
  records          Record[]

  @@map("td_piu_profile")
}

model Song {
  seq          Int        @id @default(autoincrement())
  name         String     @unique
  artist       String
  bpm          String
  version      PiuVersion
  songType     SongType   @map("song_type")
  isPremium    Boolean?   @default(false) @map("is_premium")
  patchVersion String?    @map("patch_version")
  imageUrl     String?    @map("image_url")
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  charts       Chart[]

  @@map("td_song")
}

enum SongType {
  ARCADE
  REMIX
  FULL_SONG
  SHORT_CUT
}

enum PiuVersion {
  FIRST_ZERO
  NX_NXA
  FIESTA_FIESTA2
  PRIME
  PRIME2
  XX
  PHOENIX
}

model Chart {
  seq             Int               @id @default(autoincrement())
  song            Song              @relation(fields: [songSeq], references: [seq])
  songSeq         Int               @map("song_seq")
  chartType       ChartType         @map("chart_type")
  level           Int
  records         Record[]
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  Assignment      Assignment[]
  AssigmentRecord AssigmentRecord[]

  @@unique([songSeq, chartType, level])
  @@map("td_chart")
}

enum ChartType {
  SINGLE
  DOUBLE
  CO_OP
  UCS
}

model Record {
  seq               Int               @id @default(autoincrement())
  type              RecordType?
  user              User              @relation(fields: [userSeq], references: [seq])
  userSeq           Int               @map("user_seq")
  piuProfile        PiuProfile        @relation(fields: [piuProfileSeq], references: [seq])
  piuProfileSeq     Int               @map("piu_profile_seq")
  chart             Chart             @relation(fields: [chartSeq], references: [seq])
  chartSeq          Int               @map("chart_seq")
  perfect           Int?
  great             Int?
  good              Int?
  bad               Int?
  miss              Int?
  grade             RecordGrade
  plate             RecordPlate?
  score             Int
  isBreakOff        Boolean           @default(false) @map("is_break_off")
  playedAt          DateTime?         @map("played_at")
  createdAt         DateTime          @default(now()) @map("created_at")
  assignmentRecords AssigmentRecord[]

  @@unique([chartSeq, piuProfileSeq, playedAt])
  @@map("td_record")
}

enum RecordType {
  RECENTLY_PLAYED
  BEST_SCORE
}

enum RecordPlate {
  ROUGH_GAME
  FAIR_GAME
  TALENTED_GAME
  MARVELOUS_GAME
  SUPERB_GAME
  EXTREME_GAME
  ULTIMATE_GAME
  PERFECT_GAME
}

enum RecordGrade {
  SSS_PLUS
  SSS
  SS_PLUS
  SS
  S_PLUS
  S
  AAA_PLUS
  AAA
  AA_PLUS
  AA
  A_PLUS
  A
  B
  C
  D
  F
}

model AssignmentRoom {
  seq                        Int                          @id @default(autoincrement())
  name                       String                       @unique
  description                String?
  bannerImage                String?                      @map("banner_image")
  admin                      User                         @relation(fields: [adminUserSeq], references: [seq])
  adminUserSeq               Int                          @map("admin_user_seq")
  stopParticipating          Boolean                      @default(false) @map("stop_participating")
  selectSongAuthorityUsers   Json?                        @map("select_song_authority_users")
  updatedAt                  DateTime                     @updatedAt @map("updated_at")
  createdAt                  DateTime                     @default(now()) @map("created_at")
  assignments                Assignment[]
  assignmentRoomParticipants AssignmentRoomParticipants[]

  @@map("td_assignment_room")
}

model AssignmentRoomParticipants {
  seq               Int            @id @default(autoincrement())
  room              AssignmentRoom @relation(fields: [assignmentRoomSeq], references: [seq])
  user              User           @relation(fields: [userSeq], references: [seq])
  assignmentRoomSeq Int            @map("room_seq")
  userSeq           Int            @map("user_seq")
  firstPlaceSeqs    Json?          @map("first_place_seqs")
  secondPlaceSeqs   Json?          @map("second_place_seqs")
  thirdPlaceSeqs    Json?          @map("third_place_seqs")
  notAttendCount    Int            @default(0) @map("not_attend_count")
  totalScore        Int            @default(0) @map("total_score")
  isExited          Boolean?       @default(false) @map("is_exited")
  updatedAt         DateTime       @updatedAt @map("updated_at")
  createdAt         DateTime       @default(now()) @map("created_at")

  @@unique([assignmentRoomSeq, userSeq])
  @@map("td_assignment_room_participants")
}

model Assignment {
  seq            Int               @id @default(autoincrement())
  roomSeq        Int               @map("room_seq")
  room           AssignmentRoom    @relation(fields: [roomSeq], references: [seq])
  startDate      DateTime          @map("start_date")
  endDate        DateTime          @map("end_date")
  chart          Chart             @relation(fields: [chartSeq], references: [seq])
  chartSeq       Int               @map("chart_seq")
  createUserSeq  Int               @map("create_user_seq")
  createUser     User              @relation(fields: [createUserSeq], references: [seq])
  memo           String?
  enableBreakOff Boolean           @default(false) @map("enable_break_off")
  rankProcessed  Boolean           @default(false) @map("rank_processed")
  updatedAt      DateTime          @updatedAt @map("updated_at")
  createdAt      DateTime          @default(now()) @map("created_at")
  records        AssigmentRecord[]

  @@index([roomSeq, startDate, endDate])
  @@map("td_assignment")
}

model AssigmentRecord {
  seq           Int        @id @default(autoincrement())
  assignment    Assignment @relation(fields: [assignmentSeq], references: [seq])
  assignmentSeq Int        @map("assignment_seq")
  user          User       @relation(fields: [userSeq], references: [seq])
  userSeq       Int        @map("user_seq")
  chart         Chart      @relation(fields: [chartSeq], references: [seq])
  chartSeq      Int        @map("chart_seq")
  record        Record     @relation(fields: [recordSeq], references: [seq])
  recordSeq     Int        @map("record_seq")
  updatedAt     DateTime   @updatedAt @map("updated_at")
  createdAt     DateTime   @default(now()) @map("created_at")

  @@unique([assignmentSeq, recordSeq])
  @@index([assignmentSeq, userSeq])
  @@map("td_assignment_record")
}

model Rival {
  seq         Int      @id @default(autoincrement())
  fromUser    User     @relation("fromRival", fields: [fromUserSeq], references: [seq])
  fromUserSeq Int      @map("from_user_seq")
  toUser      User     @relation("toRival", fields: [toUserSeq], references: [seq])
  toUserSeq   Int      @map("to_user_seq")
  // toUser의 동의 여부
  isAccpeted  Boolean  @default(false) @map("is_accepted")
  updatedAt   DateTime @updatedAt @map("updated_at")
  createdAt   DateTime @default(now()) @map("created_at")

  @@map("td_rival")
}

model SkillAttack {
  seq         Int      @id @default(autoincrement())
  userSeq     Int      @map("user_seq")
  user        User     @relation(fields: [userSeq], references: [seq])
  skillPoints Decimal  @map("skill_points") @db.Decimal(10, 5)
  recordSeqs  Json     @map("record_seqs")
  createdAt   DateTime @default(now()) @map("created_at")

  @@map("td_skill_attack")
}

model ActionLog {
  seq        Int        @id @default(autoincrement())
  userSeq    Int        @map("user_seq")
  user       User       @relation(fields: [userSeq], references: [seq])
  actionType ActionType @map("action_type")
  extra      Json?
  createdAt  DateTime   @default(now()) @map("created_at")

  @@map("td_action_log")
}

enum ActionType {
  SYNC_RECORD
  CHANGE_NICKNAME
}

model Notice {
  seq       Int      @id @default(autoincrement())
  title     String
  contents  String   @db.Text
  userSeq   Int      @map("user_seq")
  user      User     @relation(fields: [userSeq], references: [seq])
  updatedAt DateTime @updatedAt @map("updated_at")
  createdAt DateTime @default(now()) @map("created_at")
  Reply     Reply[]

  @@map("td_notice")
}

model Reply {
  seq       Int       @id @default(autoincrement())
  type      ReplyType
  contents  String
  userSeq   Int       @map("user_seq")
  user      User      @relation(fields: [userSeq], references: [seq])
  noticeSeq Int?      @map("notice_seq")
  notice    Notice?   @relation(fields: [noticeSeq], references: [seq])
  updatedAt DateTime  @updatedAt @map("updated_at")
  createdAt DateTime  @default(now()) @map("created_at")

  @@map("td_reply")
}

enum ReplyType {
  NOTICE
}
