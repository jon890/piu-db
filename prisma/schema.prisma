// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_PRISMA_URL") // uses connection pooling
}

model User {
  seq                        Int                          @id @default(autoincrement())
  name                       String                       @unique
  password                   String
  nickname                   String                       @unique
  uid                        String                       @unique
  createdAt                  DateTime                     @default(now()) @map("created_at")
  updatedAt                  DateTime                     @updatedAt @map("updated_at")
  piuProfiles                PiuProfile[]
  assignment                 Assignment[]
  assignmentRooms            AssignmentRoom[]
  assignmentRoomParticipants AssignmentRoomParticipants[]
  assignmentRecords          AssigmentRecord[]
  records                    Record[]
  fromRival                  Rival[]                      @relation("fromRival")
  toRival                    Rival[]                      @relation("toRival")

  @@map("td_user")
}

model PiuProfile {
  seq              Int      @id @default(autoincrement())
  gameId           String   @unique @map("game_id")
  lastLoginDate    String?  @map("last_login_date")
  lastPlayedCenter String?  @map("last_played_center")
  user             User     @relation(fields: [userSeq], references: [seq])
  userSeq          Int      @map("user_seq")
  isPrimary        Boolean  @default(false) @map("is_primary")
  records          Record[]
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  @@map("td_piu_profile")
}

model Song {
  seq          Int        @id @default(autoincrement())
  name         String
  artist       String
  bpm          String
  version      PiuVersion
  songType     SongType   @map("song_type")
  isPremium    Boolean?   @default(false) @map("is_premium")
  patchVersion String?    @map("patch_version")
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  charts       Chart[]

  @@map("td_song")
}

enum SongType {
  ARCADE
  REMIX
  FULL_SONG
  SHORT_CUT
}

enum PiuVersion {
  FIRST_ZERO
  NX_NXA
  FIESTA_FIESTA2
  PRIME
  PRIME2
  XX
  PHOENIX
}

model Chart {
  seq             Int               @id @default(autoincrement())
  song            Song              @relation(fields: [songSeq], references: [seq])
  songSeq         Int               @map("song_seq")
  chartType       ChartType         @map("chart_type")
  level           Int
  records         Record[]
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  Assignment      Assignment[]
  AssigmentRecord AssigmentRecord[]

  @@unique([songSeq, chartType, level])
  @@map("td_chart")
}

enum ChartType {
  SINGLE
  DOUBLE
  CO_OP
  UCS
}

model Record {
  seq             Int               @id @default(autoincrement())
  chart           Chart             @relation(fields: [chartSeq], references: [seq])
  chartSeq        Int               @map("chart_seq")
  user            User              @relation(fields: [userSeq], references: [seq])
  userSeq         Int               @map("user_seq")
  piuProfile      PiuProfile        @relation(fields: [piuProfileSeq], references: [seq])
  piuProfileSeq   Int               @map("piu_profile_seq")
  score           Int
  perfect         Int
  great           Int
  good            Int
  bad             Int
  miss            Int
  maxCombo        Int               @map("max_combo")
  grade           RecordGrade
  plate           RecordPlate
  playedAt        DateTime          @map("played_at")
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  AssigmentRecord AssigmentRecord[]

  @@unique([chartSeq, piuProfileSeq, playedAt])
  @@map("td_record")
}

enum RecordPlate {
  ROUGH_GAME
  FAIR_GAME
  TALENTED_GAME
  MARVELOUS_GAME
  SUPERB_GAME
  EXTREME_GAME
  ULTIMATE_GAME
  PERFECT_GAME
}

enum RecordGrade {
  SSS_PLUS
  SSS
  SS_PLUS
  SS
  S_PLUS
  S
  AAA_PLUS
  AAA
  AA_PLUS
  AA
  A_PLUS
  A
  B
  C
  D
  F
}

model AssignmentRoom {
  seq                        Int                          @id @default(autoincrement())
  name                       String                       @unique
  description                String?
  bannerImage                String?                      @map("banner_image")
  admin                      User                         @relation(fields: [adminUserSeq], references: [seq])
  adminUserSeq               Int                          @map("admin_user_seq")
  assignments                Assignment[]
  assignmentRoomParticipants AssignmentRoomParticipants[]
  updatedAt                  DateTime                     @updatedAt @map("updated_at")
  createdAt                  DateTime                     @default(now()) @map("created_at")

  @@map("td_assignment_room")
}

model AssignmentRoomParticipants {
  seq               Int            @id @default(autoincrement())
  room              AssignmentRoom @relation(fields: [assignmentRoomSeq], references: [seq])
  user              User           @relation(fields: [userSeq], references: [seq])
  assignmentRoomSeq Int            @map("room_seq")
  userSeq           Int            @map("user_seq")
  updatedAt         DateTime       @updatedAt @map("updated_at")
  createdAt         DateTime       @default(now()) @map("created_at")

  @@unique([assignmentRoomSeq, userSeq])
  @@map("td_assignment_room_participants")
}

model Assignment {
  seq           Int               @id @default(autoincrement())
  roomSeq       Int               @map("room_seq")
  room          AssignmentRoom    @relation(fields: [roomSeq], references: [seq])
  startDate     DateTime          @map("start_date")
  endDate       DateTime          @map("end_date")
  chart         Chart             @relation(fields: [chartSeq], references: [seq])
  chartSeq      Int               @map("chart_seq")
  records       AssigmentRecord[]
  createUserSeq Int               @map("create_user_seq")
  createUser    User              @relation(fields: [createUserSeq], references: [seq])
  updatedAt     DateTime          @updatedAt @map("updated_at")
  createdAt     DateTime          @default(now()) @map("created_at")

  @@index([roomSeq, startDate, endDate])
  @@map("td_assignment")
}

model AssigmentRecord {
  seq           Int        @id @default(autoincrement())
  assignment    Assignment @relation(fields: [assignmentSeq], references: [seq])
  assignmentSeq Int        @map("assignment_seq")
  user          User       @relation(fields: [userSeq], references: [seq])
  userSeq       Int        @map("user_seq")
  chart         Chart      @relation(fields: [chartSeq], references: [seq])
  chartSeq      Int        @map("chart_seq")
  record        Record     @relation(fields: [recordSeq], references: [seq])
  recordSeq     Int        @map("record_seq")
  updatedAt     DateTime   @updatedAt @map("updated_at")
  createdAt     DateTime   @default(now()) @map("created_at")

  @@unique([assignmentSeq, recordSeq])
  @@index([assignmentSeq, userSeq])
  @@map("td_assignment_record")
}

model Rival {
  seq         Int      @id @default(autoincrement())
  fromUser    User     @relation("fromRival", fields: [fromUserSeq], references: [seq])
  fromUserSeq Int      @map("from_user_seq")
  toUser      User     @relation("toRival", fields: [toUserSeq], references: [seq])
  toUserSeq   Int      @map("to_user_seq")
  // toUser의 동의 여부
  isAccpeted  Boolean  @default(false) @map("is_accepted")
  updatedAt   DateTime @updatedAt @map("updated_at")
  createdAt   DateTime @default(now()) @map("created_at")

  @@map("td_rival")
}
